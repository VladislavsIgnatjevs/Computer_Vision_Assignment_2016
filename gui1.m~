
function varargout = gui1(varargin)

% GUI1 MATLAB code for gui1.fig
% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
    'gui_Singleton',  gui_Singleton, ...
    'gui_OpeningFcn', @gui1_OpeningFcn, ...
    'gui_OutputFcn',  @gui1_OutputFcn, ...
    'gui_LayoutFcn',  [] , ...
    'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before gui1 is made visible.
function gui1_OpeningFcn(hObject, eventdata, handles, varargin)
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% --- Outputs from this function are returned to the command line.
function varargout = gui1_OutputFcn(hObject, eventdata, handles)

varargout{1} = handles.output;

global err numTiles subtile numPixelsWidth numPixelsHeight generateButton output_folder_path InputFileName InputPathName input_training_path InputFilterIndex input_training_path TrainingFileName



% --- Executes on button press in generateButton.
function generateButton_Callback(hObject, eventdata, handles)
err = 0;

%numTiles get, set and add to globals
numTiles = get(handles.numTiles,'String');
set(handles.numTiles,'String',numTiles);
assignin('base','numTiles',numTiles)

%subTiles get, set and add to globals
subtile = get(handles.subtile,'String');
set(handles.subtile,'String',subtile);
assignin('base','subtile',subtile)

%numPixelsWidth/numPixelsHeight get, set and add to globals
numPixelsWidth = get(handles.numPixelsWidth,'String');
numPixelsHeight = get(handles.numPixelsHeight,'String');

assignin('base','numPixelsWidth',numPixelsWidth)
set(handles.numPixelsWidth,'String',numPixelsWidth);

assignin('base','numPixelsHeight',numPixelsHeight)
set(handles.numPixelsHeight,'String',numPixelsHeight);

%throw error if empty directory path since path cannot be empty
%check if files were inputed or folder specified
if isempty(get(handles.imgPath,'String'))
    err = 1;
    uiwait(msgbox('Input folder path cannot be empty', 'Error'));
end

%check if output folder was specified
if isempty(get(handles.targetPath,'String'))
    uiwait(msgbox('Output folder path cannot be empty', 'Error'));
    err = 1;
end

%check if width is correct
if (str2num(get(handles.numPixelsWidth,'String')) == 0)
    uiwait(msgbox('Generated image width cannot be 0', 'Error'));
    err = 1;
end

%check if height is correct
if (str2num(get(handles.numPixelsHeight,'String')) == 0)
    uiwait(msgbox('Generated image height cannot be 0', 'Error'));
    err = 1;
end

%check if number of tiles is correct
if (str2num(get(handles.numTiles,'String')) == 0)
    uiwait(msgbox('Number of tiles cannot be 0', 'Error'));
    err = 1;
end

%check if number of subtiles is correct
if (str2num(get(handles.subtile,'String')) == 0)
    uiwait(msgbox('Number of subtiles cannot be 0', 'Error'));
    err = 1;
end



%pass error var to workspace
assignin('base','err',err);

%break if any errors
if err == 1;
    % clear err generateButton input_folder_path InputFileName InputFilterIndex InputPathName numPixelsWidth numTiles output_folder_path source_imgs_dir_path target_imgs_dir_path
    close all;
    
else
    
    %disable input fields
    set(handles.targetPath, 'Enable', 'off');
    set(handles.imgPath, 'Enable', 'off');
    set(handles.subtile, 'Enable', 'off');
    set(handles.numTiles, 'Enable', 'off');
    set(handles.numPixelsHeight, 'Enable', 'off');
    set(handles.numPixelsWidth, 'Enable', 'off');
    
    %collect the rest of vars from the base workspace
    input_folder_path = evalin('base', 'input_folder_path');
    output_folder_path = evalin('base', 'output_folder_path');
    InputFileName = evalin('base', 'InputFileName');
    
    %  msgbox(err);
    imgClassification =classify(input_folder_path);
    %0 for manma, 1 for nature
    
    out=mosaic_main(str2num(numPixelsWidth), str2num(numPixelsHeight), str2num(numTiles), str2num(subtile), input_folder_path, imgClassification);
    set(handles.processingText,'Visible','on');
end


function numPixelsWidth_Callback(hObject, eventdata, handles)

function numPixelsWidth_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function numTiles_Callback(hObject, eventdata, handles)

function numTiles_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function subtile_Callback(hObject, eventdata, handles)

function subtile_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function targetPath_Callback(hObject, eventdata, handles)

function targetPath_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function imgPath_Callback(hObject, eventdata, handles)

function imgPath_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function imgPath_ButtonDownFcn(hObject, eventdata, handles)

%open file selector (images only) if element not disabled
[InputFileName,input_folder_path] = uigetfile({'*.jpg;*.tif;*.png;*.gif','All Image Files';...
    },'MultiSelect','off');

%assign concatinate filename with path and assign to base for debug
targetImageFullPath = strcat(input_folder_path,InputFileName);
set(handles.imgPath,'String',targetImageFullPath);
assignin('base','input_folder_path',targetImageFullPath);
    

function targetPath_ButtonDownFcn(hObject, eventdata, handles)

%open folder selector if element enabled
output_folder_path = uigetdir;
set(handles.targetPath,'String',output_folder_path);
assignin('base','output_folder_path',output_folder_path);


function numPixelsHeight_Callback(hObject, eventdata, handles)

function numPixelsHeight_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function edit9_Callback(hObject, eventdata, handles)

function edit9_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
