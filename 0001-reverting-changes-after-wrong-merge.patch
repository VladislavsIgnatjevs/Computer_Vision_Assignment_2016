From cee50a783b0c201844f77e43626e1bf5e6e28c98 Mon Sep 17 00:00:00 2001
From: VladislavsIgnatjevs <v.ignatjevs@dundee.ac.uk>
Date: Tue, 22 Nov 2016 15:54:32 +0000
Subject: [PATCH] reverting changes after wrong merge

This reverts commit 545888a1af900b7e2c4092f575f71bbf7b1b07d9.
---
 gui1.m               | 46 ++++------------------------------------------
 image_converter.m    |  2 +-
 mosaic1.m            | 11 +++++------
 mosaic_main.m        | 33 ++++++++++++---------------------
 prepareEnvironment.m |  2 +-
 5 files changed, 23 insertions(+), 71 deletions(-)

diff --git a/gui1.m b/gui1.m
index 797bb0e..ff09936 100644
--- a/gui1.m
+++ b/gui1.m
@@ -24,7 +24,7 @@
 
 % Edit the above text to modify the response to help gui1
 
-% Last Modified by GUIDE v2.5 21-Nov-2016 00:43:36
+% Last Modified by GUIDE v2.5 20-Nov-2016 00:53:59
 
 % Begin initialization code - DO NOT EDIT
 gui_Singleton = 1;
@@ -75,7 +75,7 @@ function gui1_OpeningFcn(hObject, eventdata, handles, varargin)
 varargout{1} = handles.output;
 
 
-global err numTiles subtile numPixelsWidth numPixelsHeight generateButton output_folder_path InputFileName InputPathName input_training_path InputFilterIndex input_training_path TrainingFileName
+global err numTiles numPixelsWidth numPixelsHeight generateButton output_folder_path InputFileName InputPathName input_training_path InputFilterIndex input_training_path TrainingFileName
 
 
 
@@ -91,11 +91,6 @@ function generateButton_Callback(hObject, eventdata, handles)
 set(handles.numTiles,'String',numTiles);
 assignin('base','numTiles',numTiles)
 
-%numTiles get, set and add to globals
-subtile = get(handles.subtile,'String');
-set(handles.subtile,'String',subtile);
-assignin('base','subtile',subtile)
-
 %numPixelsWidth/numPixelsHeight get, set and add to globals
 numPixelsWidth = get(handles.numPixelsWidth,'String');
 numPixelsHeight = get(handles.numPixelsHeight,'String');
@@ -149,7 +144,7 @@ function generateButton_Callback(hObject, eventdata, handles)
   %  msgbox(err);
  imgClassification =classify(input_folder_path);
  %0 for nature, 1 for manmade
- out=mosaic_main(str2num(numPixelsWidth), str2num(numPixelsHeight), str2num(numTiles), str2num(subtile), input_folder_path, imgClassification);
+ out=mosaic_main(str2num(numPixelsWidth), str2num(numPixelsHeight), str2num(numTiles), input_folder_path, imgClassification);
 %   out=mosaic1(str2num(numPixelsWidth), str2num(numPixelsHeight), str2num(numTiles), input_folder_path, imgClassification);
   %prepareEnvironment(input_folder_path, output_folder_path, InputFileName, numPixelsWidth,numTiles);
 end
@@ -186,6 +181,7 @@ function numTiles_Callback(hObject, eventdata, handles)
 % Hints: get(hObject,'String') returns contents of numTiles as text
 %        str2double(get(hObject,'String')) returns contents of numTiles as a double
 
+
 % --- Executes during object creation, after setting all properties.
 function numTiles_CreateFcn(hObject, eventdata, handles)
 % hObject    handle to numTiles (see GCBO)
@@ -198,18 +194,7 @@ function numTiles_CreateFcn(hObject, eventdata, handles)
     set(hObject,'BackgroundColor','white');
 end
 
-function subtile_Callback(hObject, eventdata, handles)
 
-function subtile_CreateFcn(hObject, eventdata, handles)
-% hObject    handle to numTiles (see GCBO)
-% eventdata  reserved - to be defined in a future version of MATLAB
-% handles    empty - handles not created until after all CreateFcns called
-
-% Hint: edit controls usually have a white background on Windows.
-%       See ISPC and COMPUTER.
-if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
-    set(hObject,'BackgroundColor','white');
-end
 
 function targetPath_Callback(hObject, eventdata, handles)
 % hObject    handle to targetPath (see GCBO)
@@ -348,26 +333,3 @@ function numPixelsHeight_CreateFcn(hObject, eventdata, handles)
 if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
     set(hObject,'BackgroundColor','white');
 end
-
-
-
-function edit9_Callback(hObject, eventdata, handles)
-% hObject    handle to subtile (see GCBO)
-% eventdata  reserved - to be defined in a future version of MATLAB
-% handles    structure with handles and user data (see GUIDATA)
-
-% Hints: get(hObject,'String') returns contents of subtile as text
-%        str2double(get(hObject,'String')) returns contents of subtile as a double
-
-
-% --- Executes during object creation, after setting all properties.
-function edit9_CreateFcn(hObject, eventdata, handles)
-% hObject    handle to subtile (see GCBO)
-% eventdata  reserved - to be defined in a future version of MATLAB
-% handles    empty - handles not created until after all CreateFcns called
-
-% Hint: edit controls usually have a white background on Windows.
-%       See ISPC and COMPUTER.
-if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
-    set(hObject,'BackgroundColor','white');
-end
diff --git a/image_converter.m b/image_converter.m
index cbbfba8..d69a772 100644
--- a/image_converter.m
+++ b/image_converter.m
@@ -8,7 +8,7 @@
 clear all
 
 
-global err numTiles subtile numPixelsWidth numPixelsHeight generateButton output_folder_path InputFileName InputPathName InputFilterIndex input_folder_path input_training_path TrainingFileName fileNameArray out
+global err numTiles numPixelsWidth numPixelsHeight generateButton output_folder_path InputFileName InputPathName InputFilterIndex input_folder_path input_training_path TrainingFileName fileNameArray out
 gui1;
 
 
diff --git a/mosaic1.m b/mosaic1.m
index 4b9e5d0..d40accd 100644
--- a/mosaic1.m
+++ b/mosaic1.m
@@ -1,4 +1,4 @@
-function out=mosaic1(w,h, input_folder_path, imgClassification)%import and adjust RGB images (rough version)
+function out=mosaic1(w,h, numTiles, input_folder_path, imgClassification)%import and adjust RGB images (rough version)
 height=h;
 width=w; 
 
@@ -27,17 +27,16 @@
 picCell=cell(num,1);
 adjCell=cell(num,1);
 for i=1:num%read all images into a cell array
-    i
     picCell{i,1}=imread(char(target_array(i)));
-    gauss = fspecial('gaussian',20,100);
+    gauss = fspecial('gaussian',10,3);
     temp=imfilter(picCell{i,1},gauss);
     %temp=imgaussfilt(picCell{i,1},3);
     adjCell{i,1}=imresize(temp, [height width]);  %do gaussian filtering and resizing
 end
 out=adjCell;
-%assignin('base','out',out);
-%tilesize = evalin('base','numTiles');
-%subsize = w;
+assignin('base','out',out);
+tilesize = evalin('base','numTiles');
+subsize = w;
 
 cd('../../');
 
diff --git a/mosaic_main.m b/mosaic_main.m
index 81538d1..e56b589 100644
--- a/mosaic_main.m
+++ b/mosaic_main.m
@@ -1,15 +1,19 @@
-% function [choose, k]=mosaic_main()%hausdorff
-function [choose, k]=mosaic_main(w,h, numTiles, subtile, input_folder_path, imgClassification)%hausdorff
+% function [choose, k]=mosaic_main()%hausdorff¾àÀë
+
+function [choose, k]=mosaic_main(w,h, numTiles, input_folder_path, imgClassification)%hausdorff¾àÀë
+
+
 % tilesize=40;
+
 tilesize=numTiles;
-subsize=subtile;%size of sub tile
-outHeight=h;%output height
-outWidth=w;
+subsize=20;%size of sub tile
+outHeight=1000;%output height
+outWidth=2000;
 r=int8(tilesize/subsize)
 ratioH=int8(outHeight/tilesize)
 ratioW=int8(outWidth/tilesize)
 %temp=mosaic(100,100);
-temp=mosaic1(100,100, input_folder_path, imgClassification);
+temp=mosaic1(w,h, numTiles, input_folder_path, imgClassification);
 
 theSize=size(temp);
 colorCell=cell(theSize(1),1);
@@ -24,16 +28,12 @@
 choose=zeros(ratioH,ratioW);
 chunk=mat2cell(adjTar,repmat(tilesize,[1 ratioH]),repmat(tilesize,[1 ratioW]),3);
 for i=1:1:ratioH
-    i
     for j=1:1:ratioW
+        i
         j
-        
         c=zeros(theSize(1),2);
         comp1=colorFeat(chunk{i,j},tilesize,subsize);
-        %comp2=chunk{i,j};
         for m=1:1:theSize(1)
-            
-            %comp1=imresize(temp{m,1},[tilesize tilesize]);
             diff=comp1-colorCell{m,1};
             %k=double(ones(4,1));
             %k=0;
@@ -52,17 +52,8 @@
             %ksquare=k.^2;
             %c(m,1)=sqrt(sum(ksquare(:)));
             %c(m,1)=sqrt(k1+k2+k3+k4);
-            %c(m,1)=sqrt(k);
-            c(m,1)=k;
+            c(m,1)=sqrt(k);
             c(m,2)=m;
-            %comhist1R=imhist(comp1(:,:,1),4);
-            %comhist1G=imhist(comp1(:,:,2),4);
-            %comhist1B=imhist(comp1(:,:,3),4);
-            %comhist2R=imhist(comp2(:,:,1),4);
-            %comhist2G=imhist(comp2(:,:,2),4);
-            %comhist2B=imhist(comp2(:,:,3),4);
-            %k2=(comhist1R-comhist2R).^2+(comhist1G-comhist2G).^2+(comhist1B-comhist2B).^2;
-            %c(m,1)=sum(k2(:));
         end
         %[a,b]=min(c(:));
         sorted=sortrows(c);%sort the results
diff --git a/prepareEnvironment.m b/prepareEnvironment.m
index bd67cd0..421e8ba 100644
--- a/prepareEnvironment.m
+++ b/prepareEnvironment.m
@@ -1,5 +1,5 @@
 % prepares environment and converts files to matrices
-function prepareEnvironment(inputPath, outputPath, fileNameArray, numPixels, numTiles, subtile)
+function prepareEnvironment(inputPath, outputPath, fileNameArray, numPixels, numTiles)
 
 %add to path enviroment if not empty
 
-- 
2.9.3 (Apple Git-75)

